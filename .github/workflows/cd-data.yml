##
# (c) 2022-2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: CD Data Workflow Template

on:
  workflow_call:
    secrets:
      token:
          required: true
    outputs:
      environment:
        value: ${{ jobs.data.outputs.environment }}
      isRelease:
        value: ${{ jobs.data.outputs.isRelease }}
      isPreRelease:
        value: ${{ jobs.data.outputs.isPreRelease }}
      targetName:
        value: ${{ jobs.data.outputs.targetName }}
      isEnabled:
        value: ${{ jobs.data.outputs.isEnabled }}
      hasQualifier:
        value: ${{ jobs.data.outputs.hasQualifier }}
      deploymentName:
        value: ${{ jobs.data.outputs.deploymentName }}
      cloud:
        value: ${{ jobs.data.outputs.cloud }}
      cloudType:
        value: ${{ jobs.data.outputs.cloudType }}
      apisEnabled:
        value: ${{ jobs.data.outputs.apisEnabled }}
      isAutomatic:
        value: ${{ jobs.data.outputs.isAutomatic }}
      deliveryPush:
        value: ${{ jobs.data.outputs.deliveryPush }}
      dockerRegistry:
        value: ${{ jobs.data.outputs.dockerRegistry }}
      helmRegistry:
        value: ${{ jobs.data.outputs.helmRegistry }}
      awsRegion:
        value: ${{ jobs.data.outputs.awsRegion }}
      awsStsRoleArn:
        value: ${{ jobs.data.outputs.awsStsRoleArn }}
      runnerSet:
        value: ${{ jobs.data.outputs.runnerSet }}
      isLibrary:
        value: ${{ jobs.data.outputs.isLibrary }}

jobs:
  data:
    outputs:
      environment: ${{ steps.workspace.outputs.workspace }}
      isRelease: ${{ steps.workspace.outputs.isRelease }}
      isPreRelease: ${{ steps.workspace.outputs.isPreRelease }}
      targetName: ${{ steps.workspace.outputs.targetName }}
      isEnabled: ${{ steps.workspace.outputs.isEnabled }}
      hasQualifier: ${{ steps.workspace.outputs.hasQualifier }}
      deploymentName: ${{ steps.workspace.outputs.deploymentName }}
      cloud: ${{ steps.cloud.outputs.result }}
      cloudType: ${{ steps.cloud_type.outputs.result }}
      apisEnabled: ${{ steps.apis_enabled.outputs.result }}
      isAutomatic: ${{ steps.is_automatic.outputs.result }}
      deliveryPush: ${{ steps.workspace.outputs.deliveryPush }}
      dockerRegistry: ${{ steps.workspace.outputs.dockerRegistry }}
      helmRegistry: ${{ steps.workspace.outputs.helmRegistry }}
      awsRegion: ${{ steps.workspace.outputs.awsRegion }}
      awsStsRoleArn: ${{ steps.workspace.outputs.awsStsRoleArn }}
      runnerSet: ${{ steps.runner_set_env.outputs.result != '' && steps.runner_set_env.outputs.result || steps.runner_set.outputs.result }}
      isLibrary: ${{ steps.is_library.outputs.result }}

    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.token }}

      # Get the deployments configuration
      - name: Get the deployments configuration
        id: deploy_conf
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' .github/cloudopsworks-ci.yaml
          
      # Get the cloud entry from .github/cloudopsworks-ci.yaml as plain text
      - name: Get Cloud Entry
        id: cloud
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.cd.cloud' .github/cloudopsworks-ci.yaml | tr '[:lower:]' '[:upper:]'

      # Get the cloud type from .github/cloudopsworks-ci.yaml as plain text
      - name: Get Cloud Type
        id: cloud_type
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.cd.cloud_type' .github/cloudopsworks-ci.yaml

      # Get the apis enabled from .github/cloudopsworks-ci.yaml as plain text
      - name: Get APIs Enabled
        id: apis_enabled
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.cd.apis.enabled // false' .github/cloudopsworks-ci.yaml

      # Get the automatic setting from .github/cloudopsworks-ci.yaml as plain text
      - name: Get Automatic Setting
        id: automatic
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.cd.automatic // false' .github/cloudopsworks-ci.yaml

      # Get default Legacy delivery Push Value
      - name: Legacy Delivery Push Value
        uses: mikefarah/yq@v4.33.3
        id: default_delivery_push
        with:
          cmd: yq e -I=0 '.cd.legacyDeliveryPush' .github/cloudopsworks-ci.yaml

      # Set the appropriate workspace from what is configured from the deploy_conf step
      # Result is stored as JSON with the format found on the cd.deployments section on .github/cloudopsworks-ci.yaml
      - name: Set the appropriate workspace
        id: workspace
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = JSON.parse('${{ steps.deploy_conf.outputs.result }}');
            const head = '${{ github.head_ref }}';
            const base = '${{ github.base_ref }}';
            const ref = '${{ github.ref_name }}';
            var branch = base !== '' ? base : ref;

            var environment = '';
            var isRelease = false;
            var isPreRelease = false;
            var targetName = '';
            var isEnabled = true;
            var hasQualifier = false;
            var deploymentName = '';
            var deliveryPush = ${{ steps.default_delivery_push.outputs.result }};
            if ( deliveryPush == null ) {
              deliveryPush = false;
            }
            if ( branch.startsWith('support') ) {
              const oneMatch = deployments.support.find( ({ match }) => branch.match(new RegExp('support/'+match,'g')) );
              environment = oneMatch.env;
              targetName = oneMatch.targetName;
            } else if ( branch.startsWith('release') ) {
              isPreRelease = true;
              isEnabled = (deployments.test['enabled'] == null ? true : (deployments.test['enabled'] === 'true'));
              environment = deployments.test.env;
              if ( 'targetName' in deployments.test ) {
                targetName = deployments.test.targetName;
              }
              deploymentName = `test/${environment}`;
              if ( 'legacyDeliveryPush' in deployments.test ) {
                deliveryPush = deployments.test.legacyDeliveryPush;
              }
            } else if ( branch === 'develop' ) {
              isEnabled = (deployments.develop['enabled'] == null ? true : (deployments.develop['enabled'] === 'true'));
              environment = deployments.develop.env;
              if ( 'targetName' in deployments.develop ) {
                targetName = deployments.develop.targetName;
              }
              deploymentName = `develop/${environment}`;
              if ( 'legacyDeliveryPush' in deployments.develop ) {
                deliveryPush = deployments.develop.legacyDeliveryPush;
              }
            } else {
              // This semver structure is obtained as per specification https://semver.org/ & https://regex101.com/r/vkijKf/1/
              semver = branch.match(/^v(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?/);
              if ( semver != null ) {
                const pre = semver['groups']['prerelease'];
                const buildmeta = semver['groups']['buildmetadata'];
                // buildmeta format is deploy-XXXX.yyy.zzz
                // the metasuffix should be the deploy- prefix
                if ( pre != null && buildmeta != null) {
                  const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                  isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                  isPreRelease = true;
                  hasQualifier = true;
                  environment = deployments.prerelease.targets[metasuffix.groups.data].env;
                  if ( 'targetName' in deployments.prerelease.targets[metasuffix.groups.data] ) {
                    targetName = deployments.prerelease.targets[metasuffix.groups.data].targetName;
                  }
                  deploymentName = `prerelease/${buildmeta}/${environment}`;
                  if ( 'legacyDeliveryPush' in deployments.prelease.targets[metasuffix.groups.data] ) {
                    deliveryPush = deployments.prelease.targets[metasuffix.groups.data].legacyDeliveryPush;
                  }
                } else if ( pre != null ) {
                  isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                  // Regular expression to match following semver pattern: v1.0.2-alpha.10-uoiretu834u
                  isPreRelease = true;
                  environment = deployments.prerelease.env;
                  if ( 'targetName' in deployments.prerelease ) {
                    targetName = deployments.prerelease.targetName;
                  }
                  deploymentName = `prerelease/${environment}`;
                  if ( 'legacyDeliveryPush' in deployments.prelease ) {
                    deliveryPush = deployments.prelease.legacyDeliveryPush;
                  }
                } else if ( buildmeta != null ) {
                  const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                  isRelease = true;
                  hasQualifier = true;
                  environment = deployments.release.targets[metasuffix.groups.data].env;
                  if ( 'targetName' in deployments.release.targets[metasuffix.groups.data] ) {
                    targetName = deployments.release.targets[metasuffix.groups.data].targetName;
                  }
                  deploymentName = `release/${buildmeta}/${environment}`;
                  if ( 'legacyDeliveryPush' in deployments.release.targets[metasuffix.groups.data] ) {
                    deliveryPush = deployments.release.targets[metasuffix.groups.data].legacyDeliveryPush;
                  }
                } else {
                  isRelease = true;
                  environment = deployments.release.env;
                  if ( 'targetName' in deployments.release ) {
                    targetName = deployments.release.targetName;
                  }
                  deploymentName = `release/${environment}`;
                  if ( 'legacyDeliveryPush' in deployments.release ) {
                    deliveryPush = deployments.release.legacyDeliveryPush;
                  }
                }
              } else if ( branch === 'master' || branch === 'main' ) {
                isRelease = true;
                environment = deployments.release.env;
                if ( 'targetName' in deployments.release ) {
                  targetName = deployments.release.targetName;
                }
                deploymentName = `release/${environment}`;
                if ( 'legacyDeliveryPush' in deployments.release ) {
                  deliveryPush = deployments.release.legacyDeliveryPush;
                }
              } else {
                core.setFailed('Branch not supported');
              }
            }
            
            // Check some conditions in order to report back proper variables:
            // HELM_REGISTRY_ADDRESS
            // DOCKER_REGISTRY_ADDRESS
            // BUILD_AWS_REGION
            // BUILD_AWS_STS_ROLE_ARN
            // 
            const targetCloud = '${{ steps.cloud.outputs.result }}';
            // get helm registry variable from org
            const helm_registry_var = `HELM_REGISTRY_ADDRESS_${environment.toUpperCase()}`;
            const {data : helm} = await github.rest.actions.getOrgVariable({
              org: context.repo.owner,
              name: helm_registry_var
            }).then((response) => {
              return response;
            }).catch((error) => {
              core.error(`Error getting ${helm_registry_var} from org variables`);
              core.error(error);
              return {};
            });
            core.info(`${helm_registry_var} == ${JSON.stringify(helm)}`);
            const helm_registry = helm ? helm.value : '';
            core.info(`${helm_registry_var} == ${helm_registry}`);
            
            // get registry variable from org
            const registry_var = `DOCKER_REGISTRY_ADDRESS_${environment.toUpperCase()}`;
            const {data : registry} = await github.rest.actions.getOrgVariable({
              org: context.repo.owner,
              name: registry_var
            }).then((response) => {
              return response;
            }).catch((error) => {
              core.error(`Error getting ${registry_var} from org variables`);
              core.error(error);
              return {};
            });
            core.info(`${registry_var} == ${JSON.stringify(registry)}`);
            const docker_registry = registry ? registry.value : ''; 
            core.info(`${registry_var} == ${docker_registry}`);
            
            // get BUILD_AWS_REGION variable from org
            const region_var = `BUILD_AWS_REGION_${environment.toUpperCase()}`;
            const {data : region} = await github.rest.actions.getOrgVariable({
              org: context.repo.owner,
              name: region_var
            }).then((response) => {
              return response;
            }).catch((error) => {
              core.error(`Error getting ${region_var} from org variables`);
              core.error(error);
              return {};
            });
            core.info(`${region_var} == ${JSON.stringify(region)}`);
            const aws_region = region ? region.value : '';
            core.info(`${region_var} == ${aws_region}`);

            // get BUILD_AWS_STS_ROLE_ARN variable from org
            const sts_role_var = `BUILD_AWS_STS_ROLE_ARN_${environment.toUpperCase()}`;
            const {data : sts_role} = await github.rest.actions.getOrgVariable({
              org: context.repo.owner,
              name: sts_role_var
            }).then((response) => {
              return response;
            }).catch((error) => {
              core.error(`Error getting ${sts_role_var} from org variables`);
              core.error(error);
              return {};
            });
            core.info(`${sts_role_var} == ${JSON.stringify(sts_role)}`);
            const aws_sts_role = sts_role ? sts_role.value : '';
            core.info(`${sts_role_var} == ${aws_sts_role}`);

            const outputV = { 
              environment: environment, 
              isPreRelease: isPreRelease, 
              isRelease: isRelease,
              targetName: targetName,
              isEnabled: isEnabled,
              hasQualifier: hasQualifier,
              deploymentName: deploymentName,
              deliveryPush: deliveryPush,
              dockerRegistry: docker_registry,
              helmRegistry: helm_registry,
              awsRegion: aws_region,
              awsStsRoleArn: aws_sts_role
            }; 
            core.setOutput('workspace', environment);
            core.setOutput('isRelease', isRelease);
            core.setOutput('isPreRelease', isPreRelease);
            core.setOutput('targetName', targetName);
            core.setOutput('isEnabled', isEnabled);
            core.setOutput('hasQualifier', hasQualifier);
            core.setOutput('deploymentName', deploymentName);
            core.setOutput('deliveryPush', deliveryPush);
            core.setOutput('dockerRegistry', docker_registry);
            core.setOutput('helmRegistry', helm_registry);
            core.setOutput('awsRegion', aws_region);
            core.setOutput('awsStsRoleArn', aws_sts_role);

            return outputV;
          github-token: ${{ secrets.token }}

      - name: Get the Runner Set for this build
        id: runner_set
        uses: mikefarah/yq@master
        with:
          cmd: yq -I=0 '.cd.runner_set // "ubuntu-latest"' .github/cloudopsworks-ci.yaml

      - name: Check specific environment file exists
        id: check_env_file
        run: |
          fexist=false
          if [ ! -f .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml ]; then
            echo "File .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml does not exist"
          else
            fexist=true
          fi
          echo "result=$fexist" >> $GITHUB_OUTPUT
          

      - name: Get the Runner Set for the environment
        if: steps.check_env_file.outputs.result == 'true'
        id: runner_set_env
        uses: mikefarah/yq@master
        with:
          cmd: yq -I=0 '.runner_set // ""' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml

      - name: Get if the build is for library
        id: is_library
        uses: mikefarah/yq@master
        with:
          cmd: yq -I=0 '.isLibrary // "false"' .github/vars/inputs-global.yaml
