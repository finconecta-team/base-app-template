##
# (c) 2022-2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Preview Deploy Workflow Template

on:
  workflow_call:
    inputs:
      destroy:
        default: false
        required: false
        type: boolean
      ref:
        default: ''
        required: false
        type: string
      semver:
        required: true
        type: string
      pr_name:
        required: true
        type: string
      runner_set:
        required: true
        type: string
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      HELM_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      AZ_AKS_RESOURCE_GROUP:
        required: true
        type: string
      AZ_AKS_CLUSTER_NAME:
        required: true
        type: string
      RANCHER_PROJECT_ID:
        required: false
        type: string
        default: ''

    secrets:
      BOT_TOKEN:
        required: true
      AZURE_SERVICE_ID:
        required: true
      AZURE_SERVICE_SECRET:
        required: true
      AZ_CREDENTIALS:
        required: true      

env:
  tofu_version: 1.7.1
  tg_version: 0.59.5
  base_app_version: 3
  tf_summarize_version: 0.3.10
jobs:
  preview:
    runs-on: ${{ inputs.runner_set }}
    steps:
      - name: Install runner-tools
        run: |
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
          && sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && \
          sudo chmod +x /usr/bin/yq
          sudo apt install -y gh jq curl zip unzip python3 python3-pip
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # Proceed with checkout of source with all the references (depth=0)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Azure login
      - name: Azure Login
        run: az login --identity
      # # Azure login
      # - uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZ_CREDENTIALS }}
      # AKS context setup
      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.AZ_AKS_RESOURCE_GROUP }}
          cluster-name: ${{ inputs.AZ_AKS_CLUSTER_NAME }}
          admin: 'true'

      # Kubernetes cli
      - uses: azure/setup-kubectl@v3
      
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v3

      # Get pipeline conf
      - name: Get pipeline docker enable
        id: pipeline_docker
        run: |
          VAL=$(yq eval '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep docker | wc -l)
          echo "result=$VAL" >> $GITHUB_OUTPUT

      # Get pipeline conf
      - name: Get pipeline preview enabled
        id: has_preview
        run: |
          VAL=$(yq eval '.cd.preview.enable' ./.github/cloudopsworks-ci.yaml | grep true | wc -l)
          echo "result=$VAL" >> $GITHUB_OUTPUT

      # Get pipeline conf
      - name: Get pipeline preview enabled
        id: preview_domain
        run: |
          VAL=$(yq eval '.cd.preview.domain' ./.github/cloudopsworks-ci.yaml)
          echo "result=$VAL" >> $GITHUB_OUTPUT

      # Get pipeline conf
      - name: Get pipeline helm enable
        id: pipeline_helm
        run: |
          VAL=$(yq eval '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep helm | wc -l)
          echo "result=$VAL" >> $GITHUB_OUTPUT

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      # Create a VERSION file to use through the build
      - name: Set Version File for a Release
        env:
          NEXT_VERSION: "${{ inputs.semver }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION

      #
      # Helm tag pull request version
      #
      - name: Helm Build Preview
        if: steps.pipeline_helm.outputs.result == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
          RANCHER_PROJECT_ID: ${{ inputs.RANCHER_PROJECT_ID }}
        run: |
          cd charts/$REPOSITORY_NAME
          make tag

      - name: Run Preview prepare
        if: steps.pipeline_helm.outputs.result == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
          PR_NAME: ${{ inputs.pr_name }}
          PREVIEW_DOMAIN_NAME: ${{ steps.preview_domain.outputs.result }}
          RANCHER_PROJECT_ID: ${{ inputs.RANCHER_PROJECT_ID }}
        run: |
          cd charts/preview
          make preview

      - name: Report Preview deployment and URL
        if: steps.pipeline_helm.outputs.result == 1
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Preview Deployment Completed
            You can find the deployed instance [here](https://${{ steps.getowner.outputs.repo_name }}-${{ inputs.pr_name }}.${{ steps.preview_domain.outputs.result }})
            
            *Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
