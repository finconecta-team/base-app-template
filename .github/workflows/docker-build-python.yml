##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Docker Build Workflow - Python Image
on:
  workflow_call:
    inputs:
      semver:
        required: true
        type: string
      repository_name:
        required: true
        type: string
      repository_owner:
        required: true
        type: string
      isRelease:
        required: true
        type: boolean
      docker_inline:
        required: true
        type: string
      docker_args:
        required: true
        type: string
      python_version:
        required: true
        type: string
      python_dist:
        required: true
        type: string
      python_image_variant:
        required: true
        type: string
      custom_run_command:
        required: false
        type: string
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      TARGET_CLOUD:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      AWS_STS_ROLE_ARN:
        required: false
        type: string
        default: ""
    secrets:
      token:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AZURE_SERVICE_ID:
        required: true
      AZURE_SERVICE_SECRET:
        required: true

env:
  base_app_version: 4

jobs:
  docker-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          path: source
          fetch-depth: 1
          token: ${{ secrets.token }}

      - name: Checkout Base App Template
        uses: actions/checkout@v4
        with:
          repository: cloudopsworks/base-app-template
          path: blueprint
          fetch-depth: 1
          ref: v${{ env.base_app_version }}
          token: ${{ secrets.token }}

      # Download Artifacts from previous jobs
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: all_artifacts

      # Copy Dockerfile from blueprint to current dir
      - name: Copy Dockerfile Python
        run: |
          cp blueprint/docker/python/* .
          cp blueprint/docker/python/.dockerignore .

      # for Python version is set by parameter, defaults to 3.12
      - name: Set output with Python Version
        id: python_version_image_name
        run: |
          if [ "${{ inputs.python_version }}" != "" ] ; then
            case "${{ inputs.python_image_variant }}" in
              alpine*)
                echo "result=IMAGE_NAME=python:${{ inputs.python_version }}-${{ inputs.python_image_variant }}" >> $GITHUB_OUTPUT
                ;;
              bookworn*)
                echo "result=IMAGE_NAME=python:${{ inputs.python_version }}-${{ inputs.python_image_variant }}" >> $GITHUB_OUTPUT
                ;;
              bullseye*)
                echo "result=IMAGE_NAME=python:${{ inputs.python_version }}-${{ inputs.python_image_variant }}" >> $GITHUB_OUTPUT
                ;;
              slim*)
                echo "result=IMAGE_NAME=python:${{ inputs.python_version }}-${{ inputs.python_image_variant }}" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "result=IMAGE_NAME=python:${{ inputs.python_version }}" >> $GITHUB_OUTPUT
                ;;
            esac
          fi

      # if custom_run_command is non empty then need to override the startup.sh scripts with new content, write the file in-place
      - name: Set custom run command
        if: ${{ inputs.custom_run_command != '' }}
        run: |
          cat > ./startup.sh << EOF
            #!/bin/sh
          
            # Startup the nodejs Server (custom command)
            cd /app/webapp
            ${{ inputs.custom_run_command }}
          EOF
          
      # make a multiline replacement in the Dockerfile from inputs.docker_inline the string to replace is #<DOCKER-INJECTION-POINT> sed should use different delinmiter than /
      - name: Dockerfile Injection
        run: |
          DOCKERFILE=Dockerfile
          TEMP_FILE=$(mktemp)
          INJECTION_POINT="#<DOCKER-INJECTION-POINT>"
          while IFS= read -r line; do
            if [[ "$line" =~ $INJECTION_POINT ]]; then
              # Insert the content of input at the injection point
              echo "${{ inputs.docker_inline }}"
            else
              # Print the current line
              echo "$line"
            fi
          done < "$DOCKERFILE" > "$TEMP_FILE"
          mv "$TEMP_FILE" "$DOCKERFILE"

      #
      # Build-X run
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: SemVer split
        id: semvers
        run: |
          VER_NUM="${{ inputs.semver }}"
          VER_MAJOR=$(echo $VER_NUM | cut -f1 -d.)
          VER_MINOR=$(echo $VER_NUM | cut -f2 -d.)
          VER_PATCH=$(echo $VER_NUM | cut -f3 -d.)
          echo "major=${VER_MAJOR}" >> $GITHUB_OUTPUT
          echo "minor=${VER_MINOR}" >> $GITHUB_OUTPUT
          echo "patch=${VER_PATCH}" >> $GITHUB_OUTPUT

      # Build docker version latest release
      - name: Docker Build Release
        if:  inputs.isRelease
        uses: docker/build-push-action@v5
        with:
          build-args: |
            ${{ steps.python_version_image_name.outputs.result }}
            ${{ inputs.docker_args }}
          push: false
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ inputs.repository_owner }}/${{ inputs.repository_name }}:latest
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ inputs.repository_owner }}/${{ inputs.repository_name }}:${{ inputs.semver }}
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ inputs.repository_owner }}/${{ inputs.repository_name }}:${{ steps.semvers.outputs.major }}
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ inputs.repository_owner }}/${{ inputs.repository_name }}:${{ steps.semvers.outputs.major }}.${{ steps.semvers.outputs.minor }}
          outputs: type=docker,dest=docker-image.tar

      # Build docker version but is not latest release
      - name: Docker Build Non-Release
        if: ${{ ! inputs.isRelease }}
        uses: docker/build-push-action@v5
        with:
          build-args: |
            ${{ steps.python_version_image_name.outputs.result }}
            ${{ inputs.docker_args }}
          push: false
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ inputs.repository_owner }}/${{ inputs.repository_name }}:${{ inputs.semver }}
          outputs: type=docker,dest=docker-image.tar

      # Upload the docker image to the artifact store
      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar

  docker-image-push:
    runs-on: ubuntu-latest
    needs:
      - docker-image-build
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      #
      # Docker Build login Azure
      - name: Docker Login Azure
        env:
          TARGET: ${{ inputs.TARGET_CLOUD }}
        if: ${{ inputs.TARGET_CLOUD == 'AZURE' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          username: ${{ secrets.AZURE_SERVICE_ID }}
          password: ${{ secrets.AZURE_SERVICE_SECRET }}
      #
      # Docker Build login AWS
      - name: Configure AWS Credentials
        if: ${{ inputs.TARGET_CLOUD == 'AWS' && inputs.AWS_STS_ROLE_ARN == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      #
      # Docker Build login AWS - w/Assume Role
      - name: Configure AWS Credentials with Assume Role
        if: ${{ inputs.TARGET_CLOUD == 'AWS' && inputs.AWS_STS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ inputs.AWS_STS_ROLE_ARN }}
          role-session-name: ${{ inputs.repository_name }}-build
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Docker Login AWS
        if: ${{  inputs.TARGET_CLOUD == 'AWS' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}

      - name: Push Docker image from tar
        run: |
          docker image load --input docker-image.tar
          docker image push --all-tags ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ inputs.repository_owner }}/${{ inputs.repository_name }}
          
